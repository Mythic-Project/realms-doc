{"/branding":{"title":"Branding","data":{"how-to-change-your-dao-logo--banner#How To Change Your DAO Logo & Banner":"","step-1---fork-the-repository#Step 1 - Fork the Repository":"Fork solana-labs/governance-ui.","step-2---locate#Step 2 - Locate":"Go to the public/ realms folder.","step-3---add-files#Step 3 - Add Files":"Add a your DAO logo in a folder/file in this directory","step-4---change-parameters#Step 4 - Change Parameters":"Open mainnet-beta.json\nInclude your projects information in the format below to the end:\n{ \"symbol\": \"SOLI\",\r\n\r\n\"displayName\": \"Solana Ecosystem Index\",\r\n\r\n\"programId\": \"GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw\",\r\n\r\n\"realmId\": \"J5ViB3N7S3YRnrMpy7iSy57yYQaviJJDmrfGVT51z44o\",\r\n\r\n\"ogImage\": \"/realms/SOLI/soli_logo.png\",\r\n\r\n\"website\": \"https://tokens.amun.com/token/SOLI\",\r\n\r\n\"twitter\": \"@Amun\" },","step-5---submit-changes#Step 5 - Submit Changes":"Sign up for Vercel.com using your Github account info.\nCreate a pull request to commit your changes to Solana-labs/Governance-ui\nMake sure to check that your image works and is mapped to your DAO.\nClick on preview and search for your DAO in the Realms browser to make sure it works\nIn need of help? Hop on on Realms Discord and ask away your questions!"}},"/api":{"title":"API","data":{}},"/civicpass":{"title":"Civic Pass","data":{"protect-a-dao-with-civic-pass#Protect a DAO with Civic Pass":"By default, a DAO grants permission to vote through a governance token. In many cases, this is insufficient, and a DAO needs to add additional constraints to its membership based on their real-world identity. Example use-cases are:\nSybil-resistance and one-person-one-vote\nDAOs with quadratic voting systems\nLocation-specific DAOs\nBot-resistance\nAge-gated DAOs\nDAOs that require KYC\nThe Civic Pass plugin allows a DAO to connect their DAO to Civic Pass, a platform using the decentralized Gateway Protocol to verify and tokenize aspects of their members' real-world identity\nPlease review the Civic Pass Terms of Service carefully before continuing.By installing or integrating the Civic Pass (or Captcha) plugin, you agree to Civic Pass Terms of Service on behalf of the organization, company or other legal entity for which you act, and represent that you have the authority to bind the same.If you do not have such authority, or if you do not agree with this the Civic Pass Terms of Service, you must not continue and may not use the Services.\nIn order to enable the Civic Pass plugin, use the following steps:","step-1-skip-if-already-created---create-a-dao#Step 1 (Skip, if already created) - Create a DAO":"Create a Community Token DAO in Realms.\nThe spl-governance program version must be equal or higher than v2.2.6 for the Civic Pass plugin to work correctly.If the plugin is enabled for older versions it can result in irreversible deadlock of the DAO.\nSet up the DAO with a council token.The Civic Pass plugin does not affect the council.Setting a council allows the configuration of a DAO without requiring the council members to first obtain passes.","step-2---configure-civic-pass-plugin#Step 2 - Configure Civic Pass Plugin":"In order to configure the Civic Pass Plugin, a \"Civic: Create Gateway plugin registrar\" proposal must be created.Set the community token as the governance token and choose a Civic Pass type​.\nThe pass types offered via the UI change as new passes become available. \\Check docs.civic.com for more details.\nComing soon: Combining passes.If you are interested in using more than one Civic Pass type at once, contact civic.com or visit the Discord.","step-3---enable-civic-pass-plugin#Step 3 - Enable Civic Pass Plugin":"Once the Civic Pass plugin configuration proposal is voted on and executed, the DAO can enable it through a DAO Config Change proposal.From the DAO parameters page, select Change Config optionAnd set the Community voter weight addin parameter to the Civic Pass Gateway Program Id GgathUhdrCWRHowoRKACjgWhYHfxCEdBi5ViqYN6HVxk\nIf you want DAO community members to be able to create proposals, as well as vote on them, while still on the DAO parameters page, select 'Change Config' on the Governances section, and check the \"Enabled\" toggle beneath \"Min community tokens to create proposal\".","step-4---obtaining-a-civic-pass#Step 4 - Obtaining a Civic Pass":"Once the Civic Pass plugin has been added correctly, a button will appear on the DAO page.The button shows the status of the current pass. A status of \"Active\" indicates that the member's pass is valid, and they can interact with the DAO.Clicking the button opens an iFrame, which guides the user through the process of obtaining a Civic Pass.\nThe Civic Pass plugin supports composition with other plugins.However, the Realms UI does not yet expose this feature. If you are interested in using the Civic Pass plugin with an NFT Community DAO, please contact Civic or visit the Discord. \nIn need of help? Hop on on Realms Discord and ask away your questions!"}},"/config":{"title":"DAO configuration","data":{"":"After a DAO is created, users that detain governance tokens or council tokens can change the DAO configuration.\nFor safe measures against DAO attacks make sure you DAO configuration has a high minimum of governance tokens for it to be altered.","initial-config-visualisation#Initial Config Visualisation":"Dean's List Network State DAO is used below for example purposes.\nAfter a DAO is deployed the configuration of a DAO can be found in Params.","parameters#Parameters":"Upon opening Params you will find the DAO main addresses, configuration & governances (treasuries).","addresses#Addresses":"In the addresses section users are able to see:\nPubkey: Address of the DAO\nAuthority 'x DAO Treasury': Realm authority, usually set to one of the DAO wallets, the authority controls DAO configuration.\nOwner 'Governance Program': spl-governance instance used by the DAO.\nCommunity Mint: Address of the chosen governance token.\nCouncil Mint: Address of the council token.","config#Config":"In the config section users are able to see:\nCommunity max vote weight source: Percentage of the token supply considered for quorum.\nMin community tokens to create governance: It is what it says.\nFor Multisig DAOs without the community governance token, this value is irrelevant and it's defaulted to an arbitrary number of 1,000,000.\nUse community voter weight add-in: Indicates whether voter weight governance plugin is used by the DAO.\nUse max community voter weight add-in: Indicates whether max voter weight governance plugin is used by the DAO.","governance-treasuries#Governance (Treasuries)":"In the governances section user are able to see the DAO treasury/ treasuries and their parameters, accounts & statistics.For every treasury created an authority is also given for each.","config-modification#Config Modification":"This page's documentation is currently in progress."}},"/contribute":{"title":"Contribute","data":{"how-to-contribute#How To Contribute?":"This page's documentation is currently in progress."}},"/council":{"title":"Council","data":{"adding-council-members#Adding Council Members":"","step-1---members#Step 1 - Members":"In order to add a member to your DAO, follow the steps detailed below:","step-2---new-member#Step 2 - New Member":"Click on the [+] button in the members panel of your DAO.","step-3---wallet#Step 3 - Wallet":"Specify the new member's wallet address in the form that appears and press the [Propose] button to create a proposal to add the new member.\nAll the other options of the proposal are automatically filled out and you don't have to specify them unless you want to override the default values.\nProposal details:\nProposal Title: This is the title the other members of your DAO will see when they vote on the proposal.\nProposal Description: The description of the proposal.\nVoter Weight: If the member is added the voter weight defines how much voting power the member will have. Voter weight of 1 means the new member would have 1 vote in the DAO. The voter weight can be changed in the future by creating additional proposals.","step-4---voting#Step 4 - Voting":"After proposing and voting yourself, you have to wait for other members of the DAO to vote to add the member. Depending on how the DAO is set up a different percentage of members will have to accept the proposal before the new member can be added.\nWhen enough members approve the proposal and the approval quorum is reached, it is automatically passed without waiting the full voting time (3 days by default).\nFinally, after the proposal is approved by the DAO members, in the \"Instructions\" section of the proposal click on the [Execute] button to mint the membership token(s) to the new member.","removing-council-members#Removing Council Members":"This page's documentation is currently in progress.\nIn need of help? Hop on on Realms Discord and ask away your questions!"}},"/createplugin":{"title":"Create a Voter Weight Plugin","data":{"what-is-a-voter-weight-plugin#What is a Voter Weight Plugin?":"Realms is designed to be modular, allowing for the addition of plugins\r\nthat can modify the voter weight of members in a DAO.By default, the voter weight of a member is equal to the number of tokens they hold.However, if a DAO enables a plugin, the voter weight of a member can be modified.Example plugins are:\nQuadratic Voting: The voter weight of a member is proportional to the square root of the number of tokens they hold.\nVoter Stake Registry: A voter's weight can be increased by locking tokens.\nNFT: The voter weight of a member is proportional to the number and type of NFTs they hold.","how-to-create-a-voter-weight-plugin#How to Create a Voter Weight Plugin":"There are two parts to creating a voter weight plugin:\nThe on-chain program\nThe JS/TS client\nPlugins are stored in the Goverance Program Library, where you can see example plugins.","part-1---the-plugin-program#Part 1 - The Plugin Program":"The plugin program is a Solana program that modifies the voter weight of a member.It defines the following main account types:\nThe Registrar\nThis associates a plugin with a realm, and stores any configuration data that this plugin uses.\nThe Voter Weight Record (VWR)\nThis is a record that stores the voter weight of a member according to this plugin.\r\nIt is updated before each vote and passed in as the voter weight to the voting instruction.The SPL-Governance program checks that the program ID of the VWR matches the expected program ID for\r\nthe governance, as well as checking that it is up to date.\nThe Maximum Voter Weight Record (Max VWR) (Optional)\nThis record is used in the case where the plugin does not just modify a single voter's weight,\r\nbut also the total maximum votes of a realm. An example is an NFT DAO where the total maximum votes\r\ndepends on the number and type of all NFTs in a collection.","sample-registrar-account#Sample Registrar Account":"pub struct Registrar {\r\n    /// spl-governance program the Realm belongs to\r\n    pub governance_program_id: Pubkey,\r\n\r\n    /// Realm of the Registrar\r\n    pub realm: Pubkey,\r\n\r\n    /// Governing token mint the Registrar is for\r\n    /// It can either be the Community or the Council mint of the Realm\r\n    pub governing_token_mint: Pubkey,\r\n\r\n    /// If the plugin is one in a sequence, this is the previous plugin program ID\r\n    /// If set, then update_voter_weight_record will expect a voter_weight_record owned by this program\r\n    pub previous_voter_weight_plugin_program_id: Option<Pubkey>,\r\n    \r\n    /// ...add your configuration here\r\n\r\n    /// Reserved for future upgrades\r\n    pub reserved: [u8; 128],\r\n}","voter-weight-record#Voter Weight Record":"The structure of a Voter Weight record is fixed by the SPL-Governance program.\r\nSee here for its structure.","instructions#Instructions":"Your program is expected to have instructions to create and update the voter weight record.These will be called by your JS/TS client.","part-2---the-jsts-client#Part 2 - The JS/TS Client":"The JS/TS client is a JS plugin for the Realms UI, allowing the UI to interact with your plugin program\r\nat voting time, and when a user joins a DAO.The client must implement the Client interface in governance-program-library.The client provides implementations for\ncreating and updating voter weights and max voter weights,\ncreating and configuring registrars, and\ncalculating the current voter weight","integrating-with-realms#Integrating with Realms":"Once you have a program and client, you can integrate your plugin with Realms as follows:\nImport it into Governance UI\nRegister it in VoterWeightPlugins/clients/index.ts\nList it in VotingStructureSelector/index.tsx and constants/plugins.ts to ensure it appears in the list of plugins when editing a DAO.\nDefine any optional UI components as needed.\nThe typical place where you will need to add dedicated UI components for your plugin is the \"Voter Weight card\",\r\nwhich shows the user what their voting power is, and how it is calculated.If your plugin does not need any dedicated UI to show voting power, the \"Vanilla\" voting power UI will be used.The vanilla voting power UI will:\nassume the user can \"deposit\" tokens into the DAO\nshow the votes simply using the plugin's calculatedVoteWeight without explanation\nThis is a reasonable placeholder for some plugins, but to make life easier for users, plugin developers may want to add their own.To add your own:\nadd your plugin name to pluginsWithDedicatedVotingPowerUI in VotingPowerCards.tsx\nregister your UI component inside CardForPlugin in the same file","voter-weight-plugin-chaining#Voter Weight Plugin Chaining":"Realms supports chaining of voter weight plugins. This means that a voter's weight can be modified by multiple plugins\r\nin order.Plugins are structured like a linked-list, where each plugin registrar has a reference to the previous plugin program ID.\r\nThe final plugin program ID is registered against the governance on the realm.When a voter weight is calculated, the Realms UI will call the update_voter_weight_record instruction on each plugin in order.\r\nThe resultant voter weight record account should have the program ID of the final plugin program ID, and this will be checked\r\nby the SPL-Governance program.To support plugin chaining in your plugin:\nEnsure that your plugin registrar has a previous_voter_weight_plugin_program_id field\nEnsure that your update_voter_weight_record instruction includes an input_voter_weight_record account\nVerify that the input_voter_weight_record account has the program ID that matches the previous_voter_weight_plugin_program_id field\nFor examples of chainable plugins, see the Civic Pass and Quadratic plugins\r\nin the Governance Program Library.","supporting-chaining-in-the-ui#Supporting Chaining in the UI":"There is relatively little specific logic required to support plugin chaining when adding your plugin to the UI.The Realms code will automatically wire up your plugin with others in the chain, as long as your plugin client\r\nprovides a Registrar account that contains a previousVoterWeightPluginProgramId property.If previousVoterWeightPluginProgramId is found, then Realms will pass in an input VWR belonging to that plugin\r\nto your plugin's updateVoterWeightRecord instruction and calculateVoterWeight function.","example#Example":"Here is an example of a plugin registrar that supports chaining (using Anchor):\nexport interface Registrar {\r\n  governanceProgramId: PublicKey;\r\n  realm: PublicKey;\r\n  governingTokenMint: PublicKey;\r\n  previousVoterWeightPluginProgramId?: PublicKey;\r\n  // ...any other plugin-specific configuration\r\n}\r\n\r\nclass MyPluginClient extends Client<typeof IDL> {\r\n    //...other functions\r\n    getRegistrarAccount(realm: PublicKey, mint: PublicKey) {\r\n        const { registrar } = this.getRegistrarPDA(\r\n            realm,\r\n            mint,\r\n        );\r\n        return this.program.account.registrar.fetchNullable(\r\n            registrar\r\n        )\r\n    }\r\n\r\n    async calculateVoterWeight(voter: PublicKey, realm: PublicKey, mint: PublicKey, inputVoterWeight: BN): Promise<BN | null> {\r\n        const registrar = await this.getRegistrarAccount(realm, mint);\r\n\r\n        // This part varies depending on your plugin\r\n        const voteWeight = applyMyPluginFunction(registrar, inputVoterWeight);\r\n        \r\n        return voteWeight;\r\n    }\r\n}","input-weights-of-first-plugin#Input Weights of First Plugin":"The first plugin in the chain will receive the user's raw token balance as the input weight\r\n(or the token supply of the governance mint in the case of max voter weight plugins).This may or may not be relevant to your plugin, so you may choose to ignore it. An example would be the NFT plugin,\r\nwhich uses the user's NFTs to calculate their voting power, and does not use their token balance, and the\r\nNFT collection details are defined in the plugin registrar.If you are ignoring the input voter weight, you may not want to prompt the user to deposit their governance tokens\r\n(since doing so has no effect on their voting power). In this case, set the requiresInputVoterWeight property\r\nto false. Set it explicitly to true to prompt the user to deposit their tokens.Note, this toggle has no effect on the on-chain logic - the plugin will still receive the input voter weight.\r\nIt is purely a UI convenience."}},"/glossary":{"title":"Glossary","data":{"":"Feel free to reach out in Discord if you want more vocabulary terms added below!","dao-decentralized-autonomous-organization#DAO (Decentralized Autonomous Organization)":"A decentralized organization that operates based on rules encoded as smart contracts on a blockchain. DAOs are governed by their members through a transparent voting process.","proposal#Proposal":"A formal suggestion or plan put forward for consideration by the members of a DAO. Proposals can include changes to the DAO’s operations, allocation of funds, or changes to the governance structure.","multisig#Multisig":"A security mechanism requiring multiple signatures to authorize a transaction. This adds a layer of security by preventing a single point of failure.","treasury#Treasury":"The collective funds or assets managed by a DAO. The treasury is often used to fund projects, pay contributors, and support the operations of the DAO.","quorum#Quorum":"The percentage of votes required for a proposal to pass. This threshold can be set to ensure that a proposal has sufficient support from the community before being enacted.","delegation#Delegation":"The process of assigning voting power to another member of the DAO. Delegation allows members to entrust their voting rights to someone they believe will represent their interests.","vesting#Vesting":"The process by which tokens are gradually released to their recipients over time. Vesting schedules are used to incentivize long-term commitment and participation in the DAO.","on-chain-governance#On-Chain Governance":"A governance system where all processes and decisions are recorded and executed on the blockchain. On-chain governance ensures transparency and immutability of the decision-making process.","lockup-period#Lockup Period":"A predetermined period during which tokens, cannot be sold or transferred. Lockup periods are often used to prevent market manipulation and ensure long-term commitment."}},"/delegation":{"title":"Delegation","data":{"delegation#Delegation":"This page's documentation is currently in progress."}},"/":{"title":"Realms","data":{"what-is-realms#What is Realms?":"Realms is a sophisticated, fully on-chain platform designed to simplify and enhance the management of decentralized autonomous organizations (DAOs) on the Solana blockchain. Whether overseeing a simple multisig wallet or a large-scale protocol worth billions, Realms provides a comprehensive set of tools to support your community's growth and governance.","main-features#Main Features":"User-Friendly Interface: Create and configure your DAO with ease, thanks to Realms creation wizard setup process.\nCustomizable Framework: Adapt the DAO structure to fit various needs, including NFT communities, token-based DAOs and multi-sigs.\nQuorum and Thresholds: Set specific voting quorums and approval thresholds.\nProposal and voting validation: Utilize Civic Pass to validate who can create a proposal or cast a vote.\nDAO Activity Notifications: Use Dialect to receive notifications of new proposals.\nCustom branding: DAOs can have their own branding, color schemes and domain name.\nExamples: bonkedao.com, dao.realms.today/Deanslist\nSPL Governance Integration: Realms acts as the frontend for SPL Governance, providing a versatile and standardized approach to DAO management on Solana.\nOpen-source: - Code can be viewed on Github at https://github.com/solana-labs/governance-ui","how-can-i-use-realms#How can I use Realms?":"For a user tp use Realms in his full capacity there is three main components: DAOs, proposals, and votes. Each DAO is filled with proposals and a treasury linked to it which all proposals get voted.To create a DAO in Realms, an Solana wallet is required and a min. of 0.019 SOL.Users can then generate proposals and vote within their newly generated DAO. Council token holders can establish rules for proposal creation and voting by setting specific configurations. For instance, users may need to hold a minimum of 1 or 1 million tokens to create proposals depending on the DAO parameters.","is-realms-safe#Is Realms safe?":"Realms was audited by Ottersec in 2022.👉 See File"}},"/interface":{"title":"Governance UI","data":{"governance-ui#Governance UI":"You most likely use the web-based UI as the primary point of interaction with the SPL Governance program. Therefore, we will conclude this article with a brief overview of the discussed concepts in the context of the UI.","creating-a-realm#Creating a Realm":"When you navigate to the Realms page , you can see the list of existing realms. Clicking on the Create DAO button presents you with three options to choose from:All three options present a walkthrough wizard where different default parameters are predefined, and a different set of parameters has to be provided. The Multi-Signature wallet option creates a Realm where only the council is expected to vote, and the community is not enabled. The NFT Community DAO option creates a Realm where voting power comes from ownership of NFTs. It is a voter weight plugin that provides functionality for voting power calculation. The Community Token DAO is meant for community-driven DAOs where both the council and community are enabled.When a Realm is created, the main Realm configuration page is presented. When you change some config, it is usually done via a configuration page that ends up creating a proposal. The proposal is a usual way to change the configuration of Realm and Governance.","lets-discuss-the-most-important-parts-of-the-ui#Let's discuss the most important parts of the UI":"","my-governance-power#My governance power":"After connecting the wallet, the user can deposit tokens to the Realm and manage their delegation of voting power, withdraw tokens, and check on their created proposals. The My Proposals button shows proposals that the token owner has voted for, including active and unrelinquished ones. The menu names the unrelinquished proposals as Unreleased Proposals. To withdraw tokens, the user has to to relinquish all proposals (i.e., the Release All button). Even for finished proposals, the user has to do the unrelinquish action to withdraw tokens.","params#Params":"This section shows the parameters of the Realm and allows for changes. The user can change the configuration of the Realm (stored in RealmConfigAccount) in the top right corner by clicking on Config -> Change Config. All Governance instances are listed below, and the voting settings can be changed by clicking on the Change Config button. There are other tabs on the right side of the list of Governance instances, including Accounts, where the user can list all related accounts to the Governance. The Accounts tab lists the native treasury wallet, ATA token wallets managed by the governance, and program accounts or a mint, if available.","dao-wallets#DAO Wallets":"This section provides a different perspective on the Governance accounts. Importantly, the user can create a new Governance instance by clicking on the New DAO wallet button. The list below the button represents the addresses of the native treasury wallets (every Governance has one). To add an asset to a wallet, the user can click on the Add Asset button on the right side. A new token account can be created. The tabs on the right side of the list of native treasury addresses show a list of processed transactions. The Rules tab provides a way to change Governance parameters (similar to the Params subpage), and the Treasury and NFTs tabs provide information about the assets.","programs#Programs":"This section allows the user to manage the upgrade authority of programs and do code upgrades. The New program button creates a new program type Governance (see Different types of governances) and takes over management power for the program.","new-proposal#New proposal":"The last section we will touch on is the New proposal screen. Here, the user can create a new proposal that can be chosen from a list of common proposals (such as mint token, transfer, etc.) or pass a base64-encoded transaction as a proposal. The switch Vote by council defines if the proposal will be created as a council or community proposal (a council proposal is voted on only by the council and vice versa). At Preview transaction button, the user can check the instruction by simulating it. The Add proposal button then creates a new proposal that is eventually listed on the main configuration page."}},"/nftplugin":{"title":"Nftplugin","data":{"configure-nft-voting-plugin-and-enable-nft-voting-plugin#Configure NFT Voting Plugin and Enable NFT Voting Plugin":"This page is a continuation and copy of the original NFT Community DAO Setup\nNFT Community DAO is a DAO where NFTs are used as the governance token. Any DAO can enable NFT voting through the Plug & Play mechanism of spl-governance.In order to enable NFT governance for a DAO the NFT voting plugin has to be enabled for the DAO.The NFT voting plugin grants governance power to NFTs based on the Metaplex Certified Collection they belong to. \nMetaplex supports certified collections from version 1.1 of the standard.NFTs minted with the older Metadata standard must be upgraded first to the latest version before they can be used for governance.\nIn the most basic scenario each NFT gives its owner 1 vote. The owner can have multiple NFTs and vote with all of them at once.A DAO can also use more advanced scenarios where multiple collections with different voting power are used. This way a multi tier governance structure can be created where different NFTs can represent different membership levels.Only NFTs with certified collection on their metadata can participate in governance.\nBeware the authority of the collection can certify and uncertify NFTs for the collection.It means it has the ultimate power to decide who can and can't vote in the DAO. It's recommended for the authority to be transferred to the DAO.","step-1---create-dao#Step 1 - Create DAO":"If you already have your DAO created, you can skip this section. However, please take note of the DAO parameters needed for the setup and adjust your DAO configuration accordingly. To create the NFT Community DAO, use the Bespoke DAO Wizard with the following parameters:\nMin community tokens to create proposal: Set to 1 to allow each NFT holder to create new governances. If a more restrictive setup is required, the min threshold can be set to a higher value accordingly.\nCustom program Id: Use the default instance of spl-governance or an instance with a minimum version of v2.2.4.\nspl-governance program version must be equal or higher than v2.2.4 for the NFT plugin to work correctly.If the plugin is enabled for older versions it can result in irreversible deadlock of the DAO.\nCouncil: Setup a DAO with the council.\nIt's recommended to always set up the council as a Multisig for the initial DAO members. The members would be able to moderate the DAO governance process at its inception and prevent irreversible actions like setting impossible quorums or defending the DAO from governance attacks. After successful decentralization, the council can be removed through a proposal​.","step-2---configure-nft-voting-plugin#Step 2 - Configure NFT Voting Plugin":"To configure the NFT Plugin, a proposal with the following 3 instructions must be created:\nCreate NFT plugin registrar.\nCreate NFT plugin max voter weight.\nConfigure NFT plugin collection.\nThe NFT collection configuration instruction must be added for every NFT collection which should be allowed to participate in governance of the DAO. Each NFT collection has the following parameters:\nCollection size: The number of certified NFTs in the collection. The size of the collection is used to calculate the maximum voter weight and voting quorum levels.\nCollection weight: The relative voting weight of the NFTs from the collection.\nCollection: The Id of the NFT collection which should be used for governance​.\nThe collection ID can be found on the NFT explorer view. For example for Dean's List NFT the collection id is 5FusHaKEKjfKsmQwXNrhFcFABGGxu7iYCdbvyVSRe3Ri","step-3---enable-nft-voting-plugin#Step 3 - Enable NFT Voting Plugin":"Once the NFT voting plugin configuration proposal is voted on and all instructions executed, the DAO can enable NFT governance through a DAO Config Change proposal.From the DAO parameters page, select Change Config option or create a Proposal directly.And then set the DAO configuration parameters.Both Community voter weight addin and Community max voter weight addin parameters should be set to the NFT Voting Plugin Program Id:GnftV5kLjd67tvHpNGyodwWveEKivz3ZWvvE3Z4xi2iw","step-4---voting-with-nfts#Step 4 - Voting with NFTs":"Once the proposal to enable the NFT Voting Plugin for the DAO is executed, any owner of an NFT from the configured collection can participate in the DAO governance.The NFTs eligible for governance are displayed in the account view.\nIn need of help? Hop on on Realms Discord and ask away your questions!"}},"/notifications":{"title":"Notifications","data":{"notifications#Notifications":"This page's documentation is currently in progress."}},"/quadratic":{"title":"Quadratic Voting","data":{"what-is-quadratic-voting#What is Quadratic Voting?":"Quadratic Voting (QV) is a voting mechanism that ascribes a \"cost\" to a vote, allowing:\nvoters to express the intensity of their preferences across a range of issues\nthe tempering of the influence of wealthy voters, by increasing the cost of additional votes\nThe Quadratic Voting Plugin in Realms implements the latter feature by making the voting power of a\r\nmember proportional to the square root of the number of tokens they hold.This has the effect of increasing the voting power of minority voters compared to large token holders,\r\nincreasing alignment and encouraging voter participation.","what-is-sybil-resistance#What is Sybil Resistance?":"One challenge to Quadratic Voting is the potential for a single voter to create multiple accounts, split their\r\ntokens between them, and vote multiple times.This is known as a Sybil Attack.To mitigate this in Realms, the Civic Pass Plugin is also used, to ensure that each voter is a unique individual.This means that Quadratic Voting DAOs in Realms require voters to have a Civic Pass. For more details, see civic.com.","creating-a-qv-dao-from-scratch#Creating a QV DAO from Scratch":"","step-1---select-community-dao#Step 1 - Select Community DAO":"Choose the Community Token DAO option from the Create DAO page.","step-2---select-quadratic#Step 2 - Select Quadratic":"In the Community Token section, select Advanced Options,\r\nand then select Quadratic.Note: It is possible here to configure the Quadratic Voting plugin. We recommend keeping the default settings.\r\nTo learn about the configuration options, see below.","step-3---create-dao#Step 3 - Create DAO":"Proceed through the other steps of the DAO and create it.","adapting-an-existing-dao-to-use-qv#Adapting an existing DAO to use QV":"The spl-governance program version must be equal or higher than v2.2.6 for the QV plugin to work correctly.If the plugin is enabled for older versions it can result in irreversible deadlock of the DAO.","step-1---add-civic-pass-plugin#Step 1 - Add Civic Pass Plugin":"Select the Params button and choose Change config.Select Civic as the governance structureLeave the pass type as the default.Click Continue, Create Proposal and vote on the resultant proposal.Once the proposal has passed, execute it.","step-2---add-qv-plugin#Step 2 - Add QV Plugin":"Once again, select the Params button and choose Change config.This time, select Quadratic as the governance structure, and enable the\r\nChain this plugin with the Civic Plugin? option.Leave the coefficients as the default.Click Continue, Create Proposal and vote on the resultant proposal.Once the proposal has passed, execute it.You have now converted the DAO to use Quadratic Voting!","advanced-configuration#Advanced Configuration":"","coefficients#Coefficients":"The QV plugin uses the following formula for calculating the voting power of a member:The coefficients a, b, and c can be configured by the DAO creator, but are set as default to 1,0,0 respectively(*),\r\nwhich has the effect of making the voting power of a member equal to the square root of the number of tokens they hold.\nThe a coefficient in fact depends on the number of decimal places of the token, and is formally calculated as \nSetting the coefficients to different values can have the effect of making the voting power of a member more or less sensitive to the number of tokens they hold.\r\nFor extreme examples:\nSetting a and c to 0 and b to 1 would make the voting power of a member equal to the number of tokens they hold.\nSetting a and b to 0 and c to 1 would make the voting power of a member equal to 1,\r\nregardless of the number of tokens they hold, resulting in a one-person one-vote system.","civic-pass#Civic Pass":"The choice of Civic Pass type can be configured by the DAO creator, and can be set to any of the available Civic Pass types.\r\nHowever, it is worth noting that not all Civic Passes are suitable for sybil resistance. Therefore it is recommended to\r\nuse the default Civic Pass type to secure your DAO.","circulating-token-supply-factor#Circulating Token Supply Factor":"When configuring your DAO, you have the option to set the circulating token supply to a percentage of the total\r\ntoken supply.This allows a DAO to configure its maximum voter weight, which, in a quadratic voting DAO, is based on the\r\ntoken distribution and is typically less than the total token supply.This is particularly useful if you know the upper limit will not exceed a fixed value.For example, if 25% of the total supply is held by a single entity, that votes in a block, then\r\nyou can set the circulating supply factor to 75% + the square root of the number of tokens held by the entity.","approval-quorum#Approval Quorum":"The approval quorum is the amount of votes required for a proposal to pass. It is set as a percentage of the circulating\r\nvoter weight. Combined with the circulating total supply factor, this allows a DAO to configure the amount of votes\r\nneeded for a proposal to pass, and adapt it over time.This value should be used when the max voter weight is not known, or varies frequently.\nIn need of help? Hop on on Realms Discord and ask away your questions!"}},"/setup/daomultisig":{"title":"Multi-Signature DAO","data":{"dao-creation#DAO Creation":"The multisig option is the first and easiest way to create a DAO. When you select this option you only need to worry about three things:\nThe name of your DAO.\nThe approval quorum, that is the minimum amount of yes votes to accept a proposal.\nPeople who'll be part of your team, whose will own a council token.\nMake sure to review all info and double check if everything is correct.After creating the DAO make sure to create a test proposal to see if the DAO is running on the correct parameters and to see if proposals can go through the quorum.For any assistance in these test proposals feel free to join our Discord.","step-1---selection#Step 1 - Selection":"Go to the Realms home page and click on Create DAO. A wizard will appear to guide you through the process​.","step-2---name#Step 2 - Name":"Enter the name of your DAO in the provided field​.\nRealms will provide a governance program ID by default, users can add their own customer Program ID under Advanced Options at this step in the multisig wallet wizard.","step-3---invite-members#Step 3 - Invite Members":"Input Solana addresses to add members to the multisig wallet​.","step-4---approval-quorum#Step 4 - Approval Quorum":"Select the minimum percentage of yes votes required to approve a proposal. The default is 60%.","step-5---review#Step 5 - Review":"After following these steps, your setup should look similar to the image below. When ready, click Create wallet. Your wallet will pop up asking for a signature. Approve to create the tokens and deploy the DAO​.Then just click Create Wallet, your wallet will pop up asking for signature. Approve it to create the tokens and deploy the DAO.\nMake sure to review all info and double check if everything is correct.\nAfter the transaction is complete, you'll be redirected to the DAO's page.\nIn need of help? Hop on on Realms Discord and ask away your questions!"}},"/setup/daonft":{"title":"Create a NFT Community DAO","data":{"dao-creation#DAO Creation":"NFT Community DAO is a DAO where NFTs are used as the governance token. Any DAO can enable NFT voting through the Plug & Play mechanism of spl-governance.In order to enable NFT governance for a DAO the NFT voting plugin has to be enabled for the DAO.The NFT voting plugin grants governance power to NFTs based on the Metaplex Certified Collection they belong to.\nMetaplex supports certified collections from version 1.1 of the standard.NFTs minted with the older Metadata standard must be upgraded first to the latest version before they can be used for governance.\nIn the most basic scenario each NFT gives its owner 1 vote. The owner can have multiple NFTs and vote with all of them at once.A DAO can also use more advanced scenarios where multiple collections with different voting power are used. This way a multi tier governance structure can be created where different NFTs can represent different membership levels.Only NFTs with certified collection on their metadata can participate in governance.\nBeware the authority of the collection can certify and uncertify NFTs for the collection.It means it has the ultimate power to decide who can and can't vote in the DAO. It's recommended for the authority to be transferred to the DAO.\nThis youtube tutorial only covers till Step 8.\nMake sure to review all info and double check if everything is correct.After creating the DAO make sure to create a test proposal to see if the DAO is running on the correct parameters and to see if proposals can go through the quorum.For any assistance in these test proposals feel free to join our Discord.","step-1---selection#Step 1 - Selection":"Go to Realms and connect your wallet in the top right corner by clicking on Sign in with Solana.Click on Create DAO button and the following wizard will be shown, in our case we will select NFT Community DAO:","step-2---name#Step 2 - Name":"Your DAO needs a name, so now is the time to choose one. We will use SMB Collection as an example in this walkthrough.\nRealms will provide a governance program ID by default, users can add their own customer Program ID under Advanced Options at this step in the community token DAO wizard.","step-3---nft-collection#Step 3 - NFT Collection":"In this step, you will need to add the address of the NFT Collection you wish to use for voting.\nThe collection ID can be found on the NFT explorer view. For example for Dean's List NFT the collection id is 5FusHaKEKjfKsmQwXNrhFcFABGGxu7iYCdbvyVSRe3Ri\nIt is important to ensure that the collection is certified by the Metaplex standard since it only possible to procced to the next step if the collection is certified.This certification ensures that the collection has been verified as authentic and meets the required standards for governance.\nOnce you have added the collection address, you will also need to input the number of NFTs in the collection. It's important to be as accurate as possible with this number, as it is used to calculate the number of votes needed for a proposal to pass.","step-4---approval-treshold#Step 4 - Approval Treshold":"Finally, you will need to adjust the percentage of the total NFT supply that is required for a proposal to pass. By default, the threshold is set to 60%, but you can adjust this based on the needs of your DAO.For example, if the approval threshold is set at 60%, this means that a proposal needs to receive 60% or more \"yes\" votes to be approved. If the proposal receives less than 60% \"yes\" votes, it will not be approved.DAOs can set their own approval thresholds, and they can vary depending on the context and the specific rules of the DAO. In some DAOs, the approval threshold may be set very high to ensure that decisions are only made with a broad consensus, while in other DAOs, the approval threshold may be set lower to allow for more flexibility in decision making.","step-5---dao-council#Step 5 - DAO Council":"In this step you will be able to create or use an existing token for the DAO's council.If the your DAO's Council have an existing token select \"Yes\" and provide the address of the token you would like to use. If the your DAO's doesn't have an existing token select \"No\" and skip to the next step.\nRealms will automatically say if the token address is correct or not.\nWhether to create a new token for the DAO council or use an existing token depends on the specific goals, structure, and context of your DAO. Here are some factors to consider:\nPurpose and utility: If the existing token already serves the DAO's purpose and aligns with its goals, using it for the council can streamline governance. However, if a new token can provide additional utility or better align with the DAO's objectives, creating a new one may be beneficial.\nToken distribution: If the existing token's distribution is fair and representative of the community, it may be suitable for the DAO council. Otherwise, a new token might be necessary to ensure broader and more balanced representation.\nCommunity engagement: Using an existing token can leverage the existing community and its interest, while a new token might attract a fresh audience and foster new engagement.\nEconomic factors: Consider the potential impact on token value, inflation, and overall token economics when deciding between using an existing token or creating a new one.","step-6---council-members-invitiation#Step 6 - Council Members Invitiation":"In this step you will be able to invite council members to the DAO by using their Solana wallet address.\nCouncil members can supervise and moderate DAO activities.It’s recommended to always create the council for DAOs in their incubation stage to prevent governance attacks or accidental losses of assets managed by the DAO.","step-7---dao-council-approval-threshold#Step 7 - DAO Council Approval Threshold":"In this step you will be able to invite council members to the DAO by using their Solana wallet address.\nStarting with a lower approval threshold can provide easier decision-making and flexibility, but may also risk power concentration and susceptibility to attacks.The ideal threshold depends on the DAO's goals, community needs, and balance between efficiency, decentralisation, and security.The specific threshold will depend on the goals and characteristics of the DAO and its community. It can also be adjusted over time based on feedback.","step-8---review#Step 8 - Review":"Make sure to review all info and double check if everything is correct.\nAfter the transaction is complete, you'll be redirected to the DAO's page.","configure-nft-voting-plugin-and-enable-nft-voting-plugin#Configure NFT Voting Plugin and Enable NFT Voting Plugin":"NFT Community DAO is a DAO where NFTs are used as the governance token. Any DAO can enable NFT voting through the Plug & Play mechanism of spl-governance.In order to enable NFT governance for a DAO the NFT voting plugin has to be enabled for the DAO.The NFT voting plugin grants governance power to NFTs based on the Metaplex Certified Collection they belong to. \nMetaplex supports certified collections from version 1.1 of the standard.NFTs minted with the older Metadata standard must be upgraded first to the latest version before they can be used for governance.\nIn the most basic scenario each NFT gives its owner 1 vote. The owner can have multiple NFTs and vote with all of them at once.A DAO can also use more advanced scenarios where multiple collections with different voting power are used. This way a multi tier governance structure can be created where different NFTs can represent different membership levels.Only NFTs with certified collection on their metadata can participate in governance.\nBeware the authority of the collection can certify and uncertify NFTs for the collection.It means it has the ultimate power to decide who can and can't vote in the DAO. It's recommended for the authority to be transferred to the DAO.","step-9---create-dao#Step 9 - Create DAO":"If you already have your DAO created, you can skip this section. However, please take note of the DAO parameters needed for the setup and adjust your DAO configuration accordingly. To create the NFT Community DAO, use the Bespoke DAO Wizard with the following parameters:\nMin community tokens to create proposal: Set to 1 to allow each NFT holder to create new governances. If a more restrictive setup is required, the min threshold can be set to a higher value accordingly.\nCustom program Id: Use the default instance of spl-governance or an instance with a minimum version of v2.2.4.\nspl-governance program version must be equal or higher than v2.2.4 for the NFT plugin to work correctly.If the plugin is enabled for older versions it can result in irreversible deadlock of the DAO.\nCouncil: Setup a DAO with the council.\nIt's recommended to always set up the council as a Multisig for the initial DAO members. The members would be able to moderate the DAO governance process at its inception and prevent irreversible actions like setting impossible quorums or defending the DAO from governance attacks. After successful decentralization, the council can be removed through a proposal​.","step-10---configure-nft-voting-plugin#Step 10 - Configure NFT Voting Plugin":"To configure the NFT Plugin, a proposal with the following 3 instructions must be created:\nCreate NFT plugin registrar.\nCreate NFT plugin max voter weight.\nConfigure NFT plugin collection.\nThe NFT collection configuration instruction must be added for every NFT collection which should be allowed to participate in governance of the DAO. Each NFT collection has the following parameters:\nCollection size: The number of certified NFTs in the collection. The size of the collection is used to calculate the maximum voter weight and voting quorum levels.\nCollection weight: The relative voting weight of the NFTs from the collection.\nCollection: The Id of the NFT collection which should be used for governance​.\nThe collection ID can be found on the NFT explorer view. For example for Dean's List NFT the collection id is 5FusHaKEKjfKsmQwXNrhFcFABGGxu7iYCdbvyVSRe3Ri","step-11---enable-nft-voting-plugin#Step 11 - Enable NFT Voting Plugin":"Once the NFT voting plugin configuration proposal is voted on and all instructions executed, the DAO can enable NFT governance through a DAO Config Change proposal.From the DAO parameters page, select Change Config option or create a Proposal directly.And then set the DAO configuration parameters.Both Community voter weight addin and Community max voter weight addin parameters should be set to the NFT Voting Plugin Program Id:GnftV5kLjd67tvHpNGyodwWveEKivz3ZWvvE3Z4xi2iw","step-12---voting-with-nfts#Step 12 - Voting with NFTs":"Once the proposal to enable the NFT Voting Plugin for the DAO is executed, any owner of an NFT from the configured collection can participate in the DAO governance.The NFTs eligible for governance are displayed in the account view.\nIn need of help? Hop on on Realms Discord and ask away your questions!"}},"/setup/daotoken":{"title":"Community Token DAO","data":{"dao-creation#DAO Creation":"When you choose to create a Community Token DAO, we assume that you're an advanced user who understands all the governance setup details and we present you a more complex and flexible form than the multisig DAO.\nMake sure to review all info and double check if everything is correct.After creating the DAO make sure to create a test proposal to see if the DAO is running on the correct parameters and to see if proposals can go through the quorum.For any assistance in these test proposals feel free to join our Discord.","step-1---selection#Step 1 - Selection":"Go to Realms and connect your wallet in the top right corner by clicking on Sign in with Solana.Click on Create DAO button and the following wizard will be shown, in our case we will select NFT Community DAO.","step-2---name#Step 2 - Name":"Your DAO needs a name, so now is the time to choose one.\nRealms will provide a governance program ID by default, users can add their own customer Program ID under Advanced Options at this step in the community token DAO wizard.","step-3---community-token#Step 3 - Community Token":"If the your DAO's community have an existing token select \"Yes\" and provide the address of the community token you would like to use. If the your DAO's community doesn't have an existing token select \"No\" and skip to step 3.1).\nRealms will automatically say if the token address is correct or not.\nAfter completing the step above you will have the option to:\nTransfer mint authority of the token to the DAO.\nSet the minimum number of community tokens needed to manage this DAO.\nDo not transfer mint authority of the token to the DAO till the DAO is not secure enough and also to prevent 51% attacks.Regarding the minimum number of community tokens needed to manage the DAO it's also recommended to set a very high value since if it's a low value a entity or person can achieve they will be able to manage the DAO and cause malicious attacks or do malicious acts.\nRealms will set the type of max voter weight to \"Supply Fraction\" and set the circulating supply factor by \"1\" by default, users can select which type of max voter weight they wanna use and also define the circulating supply factor under Advanced Options at this step in the Community Token DAO wizard.","step-4---community-token#Step 4 - Community Token":"After selecting \"No\" you will be prompt to define the minimum number of community tokens needed to manage the DAO.\nRealms suggests a minimum of 1,000,000 but there is no universally recommended minimum number of community tokens needed to manage a DAO. The optimal number of tokens and their distribution depend on the specific goals, structure, and size of the community involved.\nRealms will set the type of max voter weight to \"Supply Fraction\" and set the circulating supply factor by \"1\" by default, users can select which type of max voter weight they wanna use and also define the circulating supply factor under Advanced Options at this step in the Community Token DAO wizard.","step-5---approval-treshold#Step 5 - Approval Treshold":"In the next step, you are going to set the approval threshold. The approval threshold refers to the minimum percentage of votes required for a proposal or decision to be approved. The default is 60%.For example, if the approval threshold is set at 60%, this means that a proposal needs to receive 60% or more \"yes\" votes to be approved. If the proposal receives less than 60% \"yes\" votes, it will not be approved.DAOs can set their own approval thresholds, and they can vary depending on the context and the specific rules of the DAO. In some DAOs, the approval threshold may be set very high to ensure that decisions are only made with a broad consensus, while in other DAOs, the approval threshold may be set lower to allow for more flexibility in decision making.\nStarting with a lower approval threshold can provide easier decision-making and flexibility, but may also risk power concentration and susceptibility to attacks.The ideal threshold depends on the DAO's goals, community needs, and balance between efficiency, decentralisation, and security.The specific threshold will depend on the goals and characteristics of the DAO and its community. It can also be adjusted over time based on feedback and experience, as the community's needs evolve.","step-6---dao-council#Step 6 - DAO Council":"In this step you will be able to create or use an existing token for the DAO's council.Whether to create a new token for the DAO council or use an existing token depends on the specific goals, structure, and context of your DAO. Here are some factors to consider:\nPurpose and utility: If the existing token already serves the DAO's purpose and aligns with its goals, using it for the council can streamline governance. However, if a new token can provide additional utility or better align with the DAO's objectives, creating a new one may be beneficial.\nToken distribution: If the existing token's distribution is fair and representative of the community, it may be suitable for the DAO council. Otherwise, a new token might be necessary to ensure broader and more balanced representation.\nCommunity engagement: Using an existing token can leverage the existing community and its interest, while a new token might attract a fresh audience and foster new engagement.\nEconomic factors: Consider the potential impact on token value, inflation, and overall token economics when deciding between using an existing token or creating a new one.","step-7---council-members-invitiation#Step 7 - Council Members Invitiation":"In this step you will be able to invite council members to the DAO by using their Solana wallet address.\nCouncil members can supervise and moderate DAO activities.It’s recommended to always create the council for DAOs in their incubation stage to prevent governance attacks or accidental losses of assets managed by the DAO.","step-8---dao-council-approval-threshold#Step 8 - DAO Council Approval Threshold":"By setting your pre-determined council threshold you will be able to pass council proposals depending on how much is the threshold percentage.","step-9---review#Step 9 - Review":"After following this steps, you should have something similar like the image below:\nMake sure to review all info and double check if everything is correct.\nAfter the transaction is complete, you'll be redirected to the DAO's page.\nIn need of help? Hop on on Realms Discord and ask away your questions!"}},"/spl-governance":{"title":"Spl Governance","data":{"spl-governance#SPL Governance":"The SPL Governance is a Solana blockchain program developed as part of the Solana Program Library, meaning the program is developed by guys from Solana Labs. The program's purpose is to provide a blockchain-based tool to manage Decentralized Autonomous Organization (DAO).The SPL Governance is designed in a generic manner to cover a good number of use cases for DAO management. The cornerstone of functionality covers creating proposals containing blockchain instructions that DAO members may vote upon, and on successful voting, the instructions may be executed.A simplistic use case could be to use the system to create a multisig control over the distribution of DAO funds. A heavier use runs smooth DAO management through created instructions that can be voted on by the community and/or council, which consists of minting tokens, transferring funds from the DAO treasury, upgrading the code of programs belonging to the DAO, and administering the managed programs.","where-to-find-how-to-get#Where to find, how to get?":"This article refers to SPL Governance in version 3.1.0 released in December 2022.\nThe program of SPL Governance is part of the Solana Program Library at https://github.com/solana-labs/solana-program-library/tree/governance-v3.1.0/governance. A shared instance of the program is deployed at GovER5Lthms3bLBqWub97yVrMmEogzX7xNjdXpPPCVZw.While it's recommended for DAO in many cases to do own deployment of the program. That way, you can take the code from the repository and publish it to the network with a unique address. An advantage of such an approach is that the DAO can manage timing and details of the upgrade of the SPL Governance program, a disadvantage could be that the DAO has responsibility to maintain the program.\nFor your own deployment, use Anchor verifiable build.\nSPL Governance provides a UI to do DAO management easily. That's available at https://app.realms.today/realms (to work on devnet, add ?cluster=devnet into address bar).The source code of the UI is available at the repository:\r\nhttps://github.com/solana-labs/governance-ui\nWhen the own deployment of the program is done, the new address should be configured in the UI, into a list of known instances. That mostly means creating a PR with the configuration.\nTo integrate the SPL Governance into your own application, you can use the Typescript SDK under the Oyster repository:\nhttps://github.com/solana-labs/oyster/tree/main/packages/governance-sdk.","other-resources#Other Resources":"A good complementary resource to this article could be the official README of the governance program at GitHub.Then a nice technical description of the SPL Governance system can be found at sec3 article Solana DAO Governance (Part 1): understanding SPL Governance Workflow.\r\nA nice governance UI tutorial is available at PsyFi documentation page.","terms-and-glossary#Terms and Glossary":"The terms used within the SPL Governance system are a bit ambiguous in some places, so let's pin some of them to clarify their meaning and not miss you in the rest of the text.","dao-vs-realm#DAO vs. Realm":"The term realm is used at multiple places within the texts and documentation of the SPL Gov system. At some perspectives, it can be considered the equivalent of DAO, in cases, a DAO may consist of several realms. Let's elaborate.From a technical perspective, the Realm is the top level wrapper of configuration setup for DAO. In this context, the Realm is the top level data structure of the program that all other data structures refer to.If the DAO, as the organization itself, requires specific configuration for their voting, then such a decentralized organization could create multiple Realms, all belonging to one decentralized organization. But such a configuration is rather exceptional. It's usual that a DAO is managed within one Realm. For that, it's usual to consider the terms dao and a`` realm equivalent in the SPL Governance system. It's the reason why the governance-ui uses both terms interchangeably.","governance-vs-dao-wallet#Governance vs. DAO Wallet":"The term governance is ubiquitous. You can find it in the name of the library; the purpose of the program is to govern the DAO. Thus, eyes looking into the repository will reach the governance term naturally and quite promptly. From a code perspective, it's a data structure that defines the content of the Solana account. It's strictly bound to one realm (one realm consists of multiple governances). Governance contains a set of configuration parameters for voting over proposals.On top, the governance determines a strictly unique address of DAO wallet. It's a Solana account that holds native SOL owned by System Program, created as a PDA seeded by the governance account address. The SPL Governance program names the DAO Wallet with the term native treasury. Any transaction executed on behalf of a particular Realm falls under one particular governance where the DAO wallet address (native treasury) may be used as a fee payer.The UI differentiates between governance and the DAO wallet, but it's important to know that these terms are tightly coupled and could be considered synonymous.\nIt is highly recommended to utilize the address of the DAO wallet (i.e., native`` treasury) as the authority for managing any assets under the Realm.This includes matters such as a mint authority, a token owner authority, or a contract custom admin authority with permission to make configuration changes.While using the governance address for these purposes is possible, it is not considered a best practice.","proposal#Proposal":"It's a submission represented by a poll where voters place their pro or con attitudes. When the poll successfully passes, the proposal is considered successful, and if the submission contains a transaction, it can be executed to seal the resolution of the voting.Every proposal belongs under one particular governance. The resolution of voting depends on the number of votes gained, while thresholds of success are defined in the configuration of the governance.A voter is represented by a wallet containing tokens that identify the voter's voting power.","spl-governance-account-structure#SPL Governance Account Structure":"The Governance account structure is documented in the repository. But let's take a look at the account hierarchy in more detail. We will start with a picture of all available accounts, and then have a description of them.The top-level account (representing a DAO, as explained above) is the Realm account. The address of the realm account is calculated as a PDA address identified by its name. There cannot be two realms with the same name, the name cannot be changed while a display name is used for example, in the Governance UI can be modified.The realm is defined by two groups of voting population: council and community. Each voting population configures its mint. The field of community_mint can be defined only at the time of creation and cannot be changed later.Members of the population have the ability to create a proposal with or without instructions for execution upon successful voting. The creator of the proposal establishes the voting population. Only members of the voting population can vote on the particular proposal.For example, when a proposal is created for the council to vote on, only council members are eligible to vote. However, members of the community population may veto the proposal (when permitted in configuration).The most of the configuration of the Realm is held in a separate Solana account with the name RealmConfigAccount. This account is pointed from Realm at the field realm_config. This account split is the result of Solana's inability to support account size changes in the past. The RealmConfigAccount specifies the type of token (liquid, membership, dormant/disabled) used for a specific group of voters or plugin usage for voter weight calculation (e.g., VSR plugin).\nDespite the community_mint cannot be changed after the Realm is created it's possible to apply plugin functionality like Voter Stake Registry (VSR) that open a way to configure the mint later.\nIn addition, the realm encompasses other configuration parameters, including the rule for when a new governance instance can be created. A new governance instance can be created either when the instruction is signed by the Realm's authority address, or by a council member who owns at least one token, or by a community member who possesses enough voting power as specified in the Realm configuration.The realm groups a few or multiple Governance accounts. Governance is a basic configuration unit that defines limits for creating proposals, voting time, thresholds, and if voting may be finished before voting time elapses (known as vote tipping), if vetoing proposals is permitted, and ultimately sign the transactions to be executed using governance and native treasury (DAO Wallet) keys.\nSimilar to all other accounts listed here, the governance account is a PDA account. It is seeded with the realm address and a governance_seed. Previously, the governance_seed was a public key of the governed program, but this concept is now considered obsolete.The governance_seed should be treated as an arbitrary public key used solely to seed the governance account address. The Governance has the ability to manage any asset, whether it be a token, program, or other, and is not limited to a single governed program address.\nThe next part of the account structure hierarchy is the Proposal The proposal is created within one particular governance. A proposal is bound to a single mint (governing_token_mint) that defines the population (council or community) that may vote for it. The proposal consists of several options (determined by a string label) that the voting population can choose from.There is an optionally defined instructions for particular options that are executed when the option passes successfully. After creation, the proposal goes through a lifecycle defined by several states. The lifecycle state designates permitted operations over the proposal — only at certain states can the proposal be cancelled, voted for, transaction execution run, etc.Then the Proposal might or might not be linked with some instructions that will be executed when the proposal passes successfully through voting. The list of instructions is defined in one or multiple ProposalTransaction accounts. The account consists of a list of public keys that are expected to be provided at the time of Execution, the transaction call data, and then metadata and configuration.","different-types-of-governances#Different types of Governances":"When one checks the SPL Governance program in version 3.1, she may notice that different types of governance can be created. Those are the mint, program and token governance account types. All of those are considered deprecated but as of now they are heavily used within Governance UI (because of technical limitations).","lifecycle-of-a-proposal#Lifecycle of a Proposal":"As said before, the proposal goes through a lifecycle defined by several states. Let's take a look at them in more detail.","draft#Draft":"A new proposal is created in Draft state. The proposal consists of a set of options (each of which is determined by a string label and an index in the array where it's stored). When in Draft state, the creator of the proposal may require multiple signatories for the proposal. That's done with AddSignatory instruction. The proposal moves to Voting state only when all signatories sign the \"drafted\" proposal (we consider the \"drafted\" proposal one in Draft or SigningOff state). That way, one may ensure that the proposal won't leave the \"drafted\" state until all defined signatories confirm that the proposal is prepared to be voted on (i.e., until not ready to take votes).Calling the AddSignatory instruction is not required, but for moving the proposal to Voting state, at least the signatory of the creator is required. When a signatory has been appointed by calling the AddSignatory instruction, the signature of the creator is not demanded for the proposal to move to the Voting state.When a first signatory signs the proposal by calling the SignOffProposal instruction the proposal moves to the SigningOff state and no more signatory can be added. When all signatories (or the creator herself) sign the proposal, the proposal moves to the Voting state. That's done immediately with execution of the last SignOffProposal instruction.Until the proposal is in the Voting state, one can call the  InsertTransaction to bound a set of instructions to an option in the proposal. Options are stored in an array structure in the Proposal account and each is defined by an index. The index is passed on execution of the InsertTransaction instruction to determine which option the instructions are bound to. The call may be repeated with the same option to bound multiple instructions to it.As well, the instructions can be grouped into an array of instructions that are executed atomically. The inserted set of instructions is stored in a transaction account and at the time of execution, the ProcessExecuteTransaction takes the transaction account and executes the instructions stored in it. The address of the transaction account is calculated from the proposal public key, index of the option and index of the instruction.\nOn creating a proposal, there is a deposit, a certain amount of SOLs to custody of the Governance system. The amount increases based on the currently active proposals. The deposited amount can be refunded when the voting on the proposal is finished. The reason for that is to prevent spamming the system with proposals that are not going to be voted on. It's the benefit of UI that such maintenance operations are handled automatically.","voting#Voting":"When all signatories were added, all transactions are in place and every signatory has been acknowledged by call of SignOffProposal, then the proposal is moved to the Voting state. In this state, the proposal is ready to take votes. The voting population of the council or community may vote on the options of the proposal. They can vote Yes for the option, or cast deny (No) votes against it or may vote to Abstain. The voting is done by calling CastVote instruction. Voting time is defined by voting_base_time governance attribute and can be prolonged by setting-up voting_cool_off_time. At voting_cool_off_time period, the user may only cast negative votes (deny and vetoes) or relinquish his vote. The voting may be finished before the voting time elapses when vote tipping is enabled.The voter may change his mind and cast another vote. That has to be done by first calling the RelinquishVote that removes the voting power from the option, and then a new vote can be cast.When the voting time elapses and the proposal is not tipped to be finished sooner, one needs to call FinalizeVote instruction for the proposal being moved to Succeeded (a non-final) or Defeated (a final) state. The FinalizeVote instruction checks the number (precisely the weight) of Yes votes and the number of deny votes at all options of the proposal and considers the type of the proposal and then decides the result.The workflow for Veto votes is a bit different. The proposal is moved to the final Vetoed state when the veto threshold is met. This is checked at every CastVote call, regardless of whether vote tipping is enabled or not.During the time the proposal is in the Draft state or under Voting state the proposal may be cancelled. When it happens, the proposal is moved to a final Cancelled state. Only the owner of the proposal is permitted to call the instruction CancelProposal. The term owner means a token owner record account (see below) that was inserted into the proposal account on its creation.The proposal option successfully passes when the option gains at least the weight of votes equal to community/council_vote_threshold configured as a parameter in Governance, and the weight of positive Yes votes is higher than the weight of deny No votes. The same weight of the positive (Yes) and weight of the deny (No) votes is a tie, and the result vote for the option is resolved as Defeated. The proposal passes when at least one option has succeeded.","finalization#Finalization":"When the proposal ends in the Succeeded state, then instructions bound to the successful options may be executed. Besides the proposal's final state, each option marks its final state separately. Only those options that were marked as Succeeded (i.e., not Defeated) may execute attached instructions with the call of ExecuteTransaction.The governance may be configured with min_transaction_hold_up_time, which defines the minimum time that the instruction execution has to wait after the proposal voting ends. Every transaction holds the configuration parameter hold_up_time that cannot be lower than the minimum configured at governance (but it can be higher), it is defined by the creator of the proposal and it sets the final time that the proposal has to wait before the instructions can be executed.When all instructions are executed, the proposal is moved to the final Completed state.There is one more eventuality of the end state when the instructions from the proposal fail to be executed. That could happen because of wrongly composed instructions (e.g., wrong accounts passed to the instruction), the state of the blockchain changed since the proposal was created and the constraints for the instruction executions cannot be met anymore or more other reasons. In that case, the proposal may be marked as ExecutingWithErrors by calling the FlagTransactionError instruction (called by the proposal owner).","survey-type-proposals#Survey Type Proposals":"There is one special \"type\" of proposal that goes through the lifecycle slightly differently than usual proposals. We used the word \"type\" in quotes because it is not a real type of the proposal but just a proposal with specific attributes. When you create a proposal without any instructions attached to it and the deny voting is not permitted, it is considered a survey-type proposal.The survey-type proposal has no effect on the state of the blockchain (no instructions) thus it is used to just collect the opinion of the community.The survey-type proposal does not progress to the Succeeded state and immediately moves to the Completed state when the voting ends.","voting-and-locking-tokens#Voting and Locking Tokens":"We have discussed the data structures and workflow of SPL Governance but have not yet touched on the topic of voting. Who can vote on proposals and how is the voting power calculated?The voter must be the owner of the tokens. A realm is created with the definitions of community and council mints. Ownership of the token gives the right to vote on proposals. Voting power is calculated as the ratio of the locked number of tokens owned by the voter and the maximum voter weight of tokens for the mint. The maximum voter weight could be considered the total supply of tokens for the mint. That's strictly true for council token. For community tokens, one can configure the realm attribute community_mint_max_voter_weight_source where beside the total supply of tokens the max voter weight could be defined as an absolute number or as a fraction of the total supply. The other option to configure this is to use the add-ins (see below).Beside that, the realm configures a token type consideration. If the token type is membership then the token is controlled by the realm. The token cannot be transferred to another wallet. When the token type is liquid then the token can be freely transferred and traded, the mint authority is controlled either by realm or by any other entity. The dormant token type says the voting population is disabled in the realm.For the voter to employ their voting power, they must lock the tokens to the realm. This is done by a deposit call. The tokens are locked until any active proposal on which the voter voted exists. For the owner to withdraw the funds, he has to wait until the voting period ends or when he relinquishes his votes.The SPL Governance creates an account token owner record for each voter (more precisely, for every wallet). This record keeps track of how many tokens were locked, as well as the number of active proposals that the voter has voted for and the number of unrelinquished proposals to determine whether a withdrawal is possible.The number of locked tokens under the token owner record determines the voting power of the owner of the record. The owner may delegate this voting power to another wallet by setting it up the delegate field in the token owner record. Only one delegate can be defined per token owner record.","vote-record#Vote Record":"Casting a vote means to add voting weight to the proposal option. The voter can choose to vote for or against the proposal.\nThe voting logic of the abstain vote is not implemented, despite the type is available in the contract, and for this reason is not shown the UI.\nThe type of vote is defined by the Vote enum and passed as an argument in the cast vote instruction.When a voter casts their vote, information about this action is written to two places in the Solana blockchain. First, the proposal account is updated with the summary of the weight of votes for each option. This information is used during proposal finalization (the vote records, see below, are not used for this purpose).Second, a vote record account is created. This record gathers information such as the casted voting weight, type of vote, etc. The existence of the record attests that a vote has been cast from a particular token owner record for a particular proposal. The vote record is used to prevent double voting and for historical purposes.","plugin-system-add-ins#Plugin System (Add-ins)":"The SPL Governance Program is designed to be extensible. In version 3.1, there are two available extension points: voter weight and max voter weight add-ins.The configuration of the realm defines that there is an add-in to be used for any calculation of the voting power (voter weight) and max voter weight. This way, the voting power cannot depend solely on the number of locked tokens at the mint but mostly anything can be used for the calculation.For the reference one can check the Voter Stake Registry, a VSR plugin, managed by Blockworks Foundation. The VSR plugin is used to calculate the voting power based on the amount of SOL tokens locked in the VSR contract and permits multiple mints to be used for voting weight calculation."}},"/treasury":{"title":"Treasury","data":{"treasury-account#Treasury Account":"A treasury account is a shared wallet that holds assets owned by a DAO.Each DAO can have any number of treasury accounts holding different assets. Anybody can deposit tokens into treasury accounts but only the DAO members can approve withdrawals through treasury transfer proposals​.","step-1---creating-a-treasury-account#Step 1 - Creating a Treasury Account":"To create a treasury account, select the plus button in the right corner of the Treasury View​.","step-2---token-treasury#Step 2 - Token Treasury":"If you want your treasury account to hold tokens (e.g., USDC), you have to provide the token address (aka mint address) of the token you need​.\nCommon Token Addresses:\nUSDC: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\nUSDT: Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB\nRealms will automatically say if the token address is correct or not.","step-4---nft-treasury#Step 4 - NFT treasury":"If you want your treasury account to hold NFTs, then choose the NFT Treasury option​.","settings---treasury-governance-settings#Settings - Treasury Governance Settings":"Min community tokens to create a proposal: The minimal amount of the DAO community governance tokens a member of the DAO has to own to be allowed to propose transfers from the treasury. \nFor Multisig DAOs without the community governance token, this value is irrelevant and it's defaulted to an arbitrary number of 1,000,000.\nMin instruction hold up time (days): The minimal number of days before you can transfer funds from the treasury after a vote on the transfer proposal is approved​.\nThe delay for treasuries is usually set to 0 to allow transfers of the assets immediately after they are approved​.​\nMax voting time (days): The maximum number of days the DAO can vote on the treasury proposals. If consensus is not reached by the end of the voting time, the proposal is defeated​.\nYes vote threshold (%): The Yes vote threshold defines the number of Approve votes required to approve a transfer from a treasury account. For example, if there are 10 members in the DAO and the Yes threshold is set to 60%, then at least 6 members must approve any transfers from the treasury​.\nAfter providing all the details, press the Create button and the new treasury account will be created and accessible from the main page of your DAO​.","treasury-domain-name#Treasury Domain Name":"The Treasury domain name is a feature in the Solana Governance UI that allows a treasury account to have a .sol address, such as mytreasury.sol, through Bonfida.Anybody can send .sol domains to the treasury account. A Bonfida domain points to the current owner of said domain. For more information on solana domains, read Bonfida's documentation.\nA domain name must be owned by the treasury, not the governance itself to function.Do not transfer ownership of a domain to the governance's pubkey.","step-1---purchasing-a-sol-domain-name#Step 1 - Purchasing a .sol Domain Name":"To purchase a .sol domain name, you need to navigate to Bondifa's Solana Name Service and follow the process detailed there.","step-2---setting-up-a-treasury-address#Step 2 - Setting up a Treasury Address":"Before proceeding, ensure that your governance (e.g., DAO) has a SOL [Treasury Accounts]. If you don't have one set up yet, you should do so before continuing.Once you have a treasury account, copy the deposit address of the treasury. This will be the address to which you'll transfer the .sol domain name","step-3---transferring-the-domain-to-the-dao-treasury#Step 3 - Transferring the Domain to the DAO Treasury":"After setting up a treasury address, the next step is to transfer your domain to the treasury's address (the one you just copied).To do this, go to your domains on Bonfida, and select the domain you'd like to transfer. Under the \"Domain information\", \"Owner\" section, click the \"Transfer\" button. Paste in your treasury address and hit transfer.Once the transaction is processed, your domain has been transferred to the treasury and is now pointing to your treasury's address. You can test this by sending a small amount of SOL to this .sol domain name and see that it arrives directly into your treasury.\nIt is currently only possible to transfer out a domain name from the treasury to a different address using a proposal with a custom instruction."}},"/vsr":{"title":"Voter Stake Registry","data":{"":"This guide has screenshots and text used by the PsyOptions DAO on their docs explanation about VSR, for any additional help or in-depth questions visit our Discord!","what-is-vsr#What is VSR?":"VSR is a governance plugin implementing the veToken semantics. If a DAO uses the plugin (or any other plugin) then there are additional plugin instructions required to vote on a proposal.By establishing a Voter Stake Registry for your DAO in Realms, you can empower contributors, investors, and advisors to engage in governance while their tokens are in the vesting process. This not only fosters alignment and active participation in the DAO, but also ensures that every action is traceable on the chain!","setting-up-vsr-for-your-dao#Setting up VSR for Your DAO":"Deploy your own instance of the Voter Stake Registry to the DAO. Deploying your own is safest because it cannot be upgrade by some other authority, whether that authority is a person or another DAO.\nThis step is optional, but is the safest route to go!","step-1---registrar#Step 1 - Registrar":"Create a Registrar by passing in the governance program ID, and the community token mint. Registrars are uniquely constrained (via PDA usage) by those two parameters.\nUsing the SPL Governance UI today will default to the community owned VSR instance.\nUse ConfigureVotingMint to add a token to the Registrar and set it’s vote weight. This instruction is where a lot of magic happens and needs to be carefully paid attention to!\nConsider this - Should the vote weight be relative to the community token that is tied to the Registrar?\nRemaining accounts must be all the token mints that have registered as voting mints, including the newly registered one.","step-2----configurevotingmint-parameters#Step 2 -  ConfigureVotingMint Parameters":"idx: index of the rate to be set. There is an array of VotingMintConfigs, and the idx references the index that the corresponding config is or should be placed. When adding a new one it should be the next index.\ndigit_shift: the amount of digits to shift the native token amount. If set to positive number, the base is shifted to left. E.g. if set to then 100 tokens will give 1000 voting power. If set to -1 then 100 voting power will become 10.\nbaseline_vote_weight_scaled_factor: this simply means how much voting power will the user receive for simply depositing the tokens. Let's say, if set at 1. The user will receive 1 vote for every token deposited. If you don't wanna give voting power to users for simply depositing the tokens, you can set it to 0. Vote weight factor for all funds in vault, in 1/1e9 units. So 1e9 means 1!\nmax_extra_lockup_vote_weight_scaled_factor: this is the max voting power a user will receive for locking the tokens. Let' say, if set to 2, a user will receive 2x the deposited tokens if they lock it for the max duration. Max extra weight for lockups, in 1/1e9 units. So 1e9 means no matter how long a lock up period is the voting weight can never exceed this factor.\nlockup_saturation_secs: this is the duration for which the user has to keep the tokens locked to receive the voting power. A user can lock tokens for lesser period and will receive proportionate tokens. This is a factor that dampens the lock up vote power boost until this has passed. If this max boost power is 1e9 (factoring in the scale factor it's 1), then this value does not matter.\ngrant_authority: The authority that can grant the additional vote weight. This should be a governance authority.\nvoting_power = baseline_vote_weight + min(lockup_time_remaining / lockup_saturation_secs, 1) * max_extra_lockup_vote_weight","step-3----realm-config#Step 3 -  Realm Config":"Enable the voter weight plugin by calling the SetRealmConfig instruction on the SPL Governance program used or use the Realms UI to setup the change it for you.Option 1:\nUse the Realm Config proposal, and put the voter stake registry program ID as the community vote plugin.\nOption 2:Go to your DAO page, then Params → Config → Change Config → What type of governance structure do you want your DAO's community to use? → VSRAfter doing these steps press continue and fill out the title and description for your DAO to know about the change.","how-to-lock-your-own-tokens#How to Lock Your Own Tokens":"Brief guide onto how to lock your tokens after VSR is enable for the DAO in case.","step-1---deposit#Step 1 - Deposit":"Go to view your account on Realms.Deposit your tokens.Click \"View\" in the right hand corner of the \"Your Account\" section of the page. (See the image under step 1.)To lock your tokens, click \"Lock Tokens\".","step-2---lockup-type-selection#Step 2 - Lockup Type Selection":"Select the \"Lockup Type\", the amount of tokens to lock, and the duration of the lockup.There are three lockup types: \"Cliff\", \"Constant\" and \"Vested\".\nCliff - The cliff lockup sets a date in the future and your lockup tokens and governance power will be decaying when approaching that fixed date and you will get back your tokens that you deposited back then.\nConstant - With constant lockup your lockup your tokens basically and hence voting power never decays, if you set it to 2 years now it's going to be still 2 years a year from now, in other words there is no fixed end date of the lockup.\nVested - With vested lockup type you are able to choose between monthly and daily where you will get to claim your tokens daily/monthly while your governance power decays.\nYou may have heard the term \"Cliff\" before when discussing investor, or team token lockup schedules.","step-3---lock#Step 3 - Lock":"After setting your lockup schedule, and clicking \"Lock Tokens\" you will now be able to see information regarding your lockups from the Account page.","how-to-propose-issuing-locked-tokens#How to Propose Issuing Locked Tokens":"Brief guide onto how to propose issuing locked tokens after VSR is enable for the DAO in case.","step-1---create-proposal#Step 1 - Create Proposal":"Head to your DAO page on Realms.Select \"New Proposal\".Input a Title and Description for your proposal.","step-2---transaction-type#Step 2 - Transaction Type":"Select the Transaction type. In this case, you will select Grant. Select the \"Lock up kind\".Fill out the rest of the relevant information such as the start date, end date, wallet address and the amount.","step-3---create-the-proposal#Step 3 - Create the Proposal":"If the proposal is passed, the recipient must execute the transaction!","how-to-propose-clawing-back-granted-tokens#How to Propose Clawing Back Granted Tokens":"Brief guide onto how to propose clawing back granted tokens after VSR is enable for the DAO in case.","step-1---create-proposal-1#Step 1 - Create Proposal":"Head to your DAO page on Realms.Select \"New Proposal\".Input a Title and Description for your proposal.","step-2---transaction-type-1#Step 2 - Transaction Type":"Select the Transaction type. In this case, you will select Clawback.\nFill out the clawback information.\nVoter: The Solana wallet address that received the Grant.\nDeposit: A single voter could receive multiple Grants. Selecting this determines which Grant the proposal would clawback.\nClawback Destination: The Treasury Account the clawed back tokens should go into.","step-3---create-the-proposal-1#Step 3 - Create the Proposal":"If you try to clawback tokens that have voted on an active proposal the tokens will be transferred back to the treasury, the vote will stay, but the user will no longer have the voting power.\nIn need of help? Hop on on Realms Discord and ask away your questions!"}},"/whatisdao":{"title":"DAOs","data":{"":"At its simplest, a decentralized autonomous organization (DAO) is a community with a shared bank account. Members of the DAO make decisions in a transparent and decentralized fashion, with smart contracts executing these decisions.For instance, a member can create a proposal suggesting an investment of the treasury or a program upgrade. The DAO members then come together to vote on the proposal. If a predefined quorum votes for the proposal to pass, the proposal is accepted and and executed by a smart contract.As a result, the DAO structure provides a “flat” organizational structure. Each DAO member has a voice in the community and the opportunity to drive the direction of the organization.","where-to-find-them#Where to find them?":"DAOs are displayed upon visiting Realms and can primarily be filtered by the search bar and searching for the DAO you wish to visit.You can access a DAO directly via a link that includes domain name (e.g., https://app.realms.today/dao/MNDE). Custom domain names for spaces are also supported (bonkedao.com, dao.realms.today/Deanslist).","proposal-filtering--sorting#Proposal Filtering & Sorting":"Users can go through all of DAO proposals and turn on/off specific filters to them, including completed, canceled, and defeated proposals.","joining-a-dao#Joining a DAO":"Users can join a DAO by simply hitting the Deposit button.","dao-landing-page#DAO Landing Page":"Users when landing in their preferred DAO page will able to see straight away:\nToken Stats\nMembers\nParams (DAO Config)\nDAO Owned NFTs\nDAO Wallets & Assets (Treasury)\nPrograms (Programs that involve dApp /\\ Realms interactions)\nProposals\nUsers who have their Solana wallet connected will able to see also their governance power where they can Deposit, Withdraw, Delegate & Lock Tokens.\nToken Stats are only available for DAOs with VSR (Voter Stake Registry) enabled."}}}